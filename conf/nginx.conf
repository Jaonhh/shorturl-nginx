#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type  text/plain;

    sendfile        on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    lua_package_path ';;$prefix/conf/lua/?.lua;';

    server {
        listen       8088;
        server_name  localhost;


        location /shorten-ui.html {
            expires epoch;
            root   html;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        location = /shorten {
            add_header Content-Type text/plain;
            set_unescape_uri $url_param $arg_url;

            if ($url_param ~ ^\s*(.+?)\s*$) {
                set $url_param $1;
            }

            if ($url_param = "") {
                return 400;
            }

            if ($arg_random) {
                set_secure_random_alphanum $random_alphanum 12;
            }

            content_by_lua '
                local prefix = ngx.var.arg_prefix
                -- if not prefix then
                if prefix == nil then
                    local port = ""
                    -- 生产环境如果满足下面两点前提，则可以不传递prefix（同时注释掉下面三行代码），否则必传prefix参数
                    --   1）nginx server_name与公网域名一致
                    --   2）访问短地址与生成短地址服务的公网域名相同
                    --if ngx.var.server_port ~= "80" then
                        --port = ":" .. ngx.var.server_port
                    --end
                    prefix = "http://" .. ngx.var.server_name .. port .. "/"
                else 
                    prefix = "http://" .. prefix .. "/"
                end

                local shorten = require "n3r.urlshortener_eval"
                shorten.pack(ngx.var.url_param, prefix, ngx.var.random_alphanum)
            ';
        }

        location ~ "^/0[0-9a-zA-Z]{1,12}$" {
            content_by_lua '
                local shorten = require "n3r.urlshortener_eval"
                local notFoundRedirect = "http://www.10010.com"
                shorten.unpack(notFoundRedirect)
            ';
        }
    }

}
